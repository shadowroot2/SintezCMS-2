<?php# МОДУЛЬ РАССЫЛКА v.2.0# Coded by ShadoW (с) 2014class cnt_Index extends Controller{	private $_personal				= false;	private $_templates_container 	= 6;	private $_template_id;	private $_template_content		= '';	private $_users_containers		= array(80);	private $_users_class			= 0;	private $_planed				= false;	private $_planed_date;	private $_planed_time;	private $_planed_ts;	private $_types					= array(1=>'Списку подписчиков', 2=>'Одному адресату');	private $_type					= 1;	private $_to					= '';	private $_subject				= '';	private $_text					= '';	# ИНИЦИАЛИЗАЦИЯ	public function init()	{		if (!Core::$_data['authed']) Helpers::redirect(_CMS_.'auth');		# ПРОВЕРКА ПРАВ ДОСТУПА		if (Core::$_data['module_access'] != 'rw') exit(View::render('access_denied'));		# ВРЕМЯ ПЛАНОВОЙ РАССЫЛКИ		$this->_planed_date = date('d.m.Y');		$this->_planed_time = date('23:59');		if (isset($_POST['planed']) && ($_POST['planed'] == 1)) $this->_planed = true;		if (			$this->_planed &&			($planed_date = filter_input(INPUT_POST, 'planed_date', FILTER_VALIDATE_REGEXP, array('options'=>array('regexp'=>'/^[0-9]{2}\.[0-9]{2}\.[0-9]{4}$/')))) &&			($planed_time = filter_input(INPUT_POST, 'planed_time', FILTER_VALIDATE_REGEXP, array('options'=>array('regexp'=>'/^[0-9]{2}:[0-9]{2}$/'))))		)		{			$this->_planed_date	= $planed_date;			$this->_planed_time = $planed_time;			$this->_planed_ts	= strtotime($planed_date.' '.$planed_time.':00');		}		# JS		View::addJS(array(			_TPL_.'js/ckeditor/ckeditor.js',			_TPL_.'js/ckeditor/adapters/jquery.js',			_TPL_.'js/ckfinder/ckfinder.js'		));	}	# CОЗДАТЬ РАССЫЛКУ	public function act_index()	{		# ПОДПИСЧИКИ		$users = array();		foreach($this->_users_containers as $container_id)		{			if ($container = Model::getObject($container_id, false))			{				$users[] = array(					'id'	=> $container['id'],					'name'	=> $container['name'],					'count'	=> Model::getObjectsCount($container_id, $this->_users_class, "o.active='1'")				);			}		}		# РАССЫЛКА		if (			isset($_POST['to_type']) && ($type = filter_input(INPUT_POST, 'to_type', FILTER_VALIDATE_INT)) && isset($this->_types[$type]) && ($this->_type = $type) &&			isset($_POST['subject']) && ($this->_subject = Helpers::escape($_POST['subject'])) &&			isset($_POST['text']) && ($this->_text = str_replace('"/public/', '"http://'.str_replace('www.', '', $_SERVER['HTTP_HOST']).'/public/', $_POST['text']))		)		{			# Шаблон			if (				isset($_POST['template_id']) && ($template_id = filter_input(INPUT_POST, 'template_id', FILTER_VALIDATE_INT)) &&				($template_obj = Model::getObject($template_id, array('Текст'))) && ($template_obj['class_id'] == 1)			)			{				$this->_template_id		 = $template_id;				$this->_template_content = str_replace('/public/', 'http://'.str_replace('www.', '', $_SERVER['HTTP_HOST']).'/public/', $template_obj->field('Текст'));			}			# Тип			switch ($this->_type)			{				# СПИСКУ АДРЕСАТОВ				case 1:					if (isset($_POST['list']) && is_array($list = $_POST['list']) && count($list))					{						# Неумерайко						ignore_user_abort(true);						set_time_limit(0);						# Адресаты						$to_users = array();						foreach($list as $users_container_id)						{							if (								($users_container_id = filter_var($users_container_id, FILTER_VALIDATE_INT)) && isset($this->_users_containers[$users_container_id]) &&								($users_in_container = Model::getObjects($users_container_id, $this->_users_class, true, "o.active='1' AND c.f_".$this->_users_containers[$users_container_id]['field']."='1'"))							) $to_users = array_merge($to_users, $users_in_container);						}						# Текст письма						$mail_content = $this->_template_content != '' ? str_replace('#CONTENT#', $this->_text, $this->_template_content) : $this->_text;						# Разослать сейчас						if (!$this->_planed)						{							# Создаем письмо							Mailer::reset();							Mailer::$_subject = $this->_subject;							# Прикрепляем файлы							$this->attachFiles();							# Рассылаем							$send_mails = 0;							foreach($to_users as $u)							{								if (filter_var($u['name'], FILTER_VALIDATE_EMAIL))								{									Mailer::$_to		= $u['name'];									Mailer::$_content	= $this->userFields($mail_content, $u);									if (Mailer::send())	$send_mails++;								}							}							if ($send_mails > 0) View::assign('%message', 'Письмо успешно разослано <b>'.$send_mails.'</b> адресатам');							else View::assign('%error', 'Невозможно разослать письмо, проверьте правильность данных');						}						# Запланированная рассылка						else						{							# Проверка времени							if (($this->_planed_ts != '') && $this->_planed_ts > time())							{								# Подготавливаем плановую рассылку								if ($this->preparePlaned())								{									# Прикрепляем файлы									$files = $this->attachFiles();									# Добавляем письма в базу									$added_mails = 0;									foreach($to_users as $u)									{										if (filter_var($u['name'], FILTER_VALIDATE_EMAIL))										{											if (Model::$_db->insert('md_planed_mailer', array(												'to'		=> $u['name'],												'subject'	=> $this->_subject,												'content'	=> $this->userFields($mail_content, $u),												'files'		=> count($files) ? serialize($files) : ''											), false)) $added_mails++;										}									}									if ($added_mails > 0) View::assign('%message', 'Рассылка успешно запланирована для <b>'.$added_mails.'</b> адресатов');									else View::assign('%error', 'Невозможно запланировать рассылку');								}								else View::assign('%error', 'Невозможно подготовить плановую рассылку');							}							else View::assign('%error', 'Проверьте правильность даты и времени запланированной рассылки');						}					}				break;				# ОДНОМУ АДРЕСАТУ				case 2:					if (isset($_POST['to']) && ($this->_to = filter_input(INPUT_POST, 'to', FILTER_VALIDATE_EMAIL)))					{						# Отправить сейчас						if (!$this->_planed)						{							# Создаем письмо							Mailer::reset();							Mailer::$_to		= $this->_to;							Mailer::$_subject	= $this->_subject;							Mailer::$_content	= $this->_template_content != '' ? str_replace('#CONTENT#', $this->_text, $this->_template_content) : $this->_text;							# Прикрепление файлов							$this->attachFiles();							if (Mailer::send()) View::assign('%message', 'Письмо успешно отправлено на e-mail <b>'.$this->_to.'</b>');							else View::assign('%error', 'Невозможно отправить письмо, проверьте правильность данных');						}						# Запланированная рассылка						else						{							# Проверка времени							if (($this->_planed_ts != '') && ($this->_planed_ts > time()))							{								# Подготавливаем плановую рассылку								if ($this->preparePlaned())								{									# Прикрепляем файлы									$files = $this->attachFiles();									# Добавляем в базу									if (Model::$_db->insert('md_planed_mailer', array(										'to'		=> $this->_to,										'subject'	=> $this->_subject,										'content'	=> Helpers::escape_html(($this->_template_content != '') ? str_replace('#CONTENT#', $this->_text, $this->_template_content) : $this->_text),										'files'		=> count($files) ? serialize($files) : ''									), false)) View::assign('%message', 'Письмо <b>'.$this->_to.'</b> запланированно на <b>'.date('d.m.Y в H:i', $this->_planed_ts).'</b>');									else View::assign('%error', 'Невозможно запланировать рассылку');								}								else View::assign('%error', 'Невозможно подготовить плановую рассылку');							}							else View::assign('%error', 'Проверьте правильность даты и времени запланированной рассылки');						}					}					else View::assign('%error', 'Введен нукорректный e-mail');				break;			}			# Удаляем прикрепленные файлы			$this->removeAttachs();		}		# JS		View::addJS(array(			_TPL_.'js/swfupload/swfupload.js',			_TPL_.'js/swfupload/jquery.swfupload.js'		));		# ВЫВОД		View::assign('%page_title', 'Рассылка писем');		View::render('modules/mailer/form', true, array(			'personal'		=> $this->_personal,			'planed'		=> array('set'=>$this->_planed, 'date'=>$this->_planed_date, 'time'=>$this->_planed_time),			'types'			=> $this->_types,			'type'			=> $this->_type,			'users'			=> $users,			'to'			=> $this->_to,			'template_id'	=> $this->_template_id,			'subject'		=> $this->_subject,			'text'			=> $this->_text,			'templates'		=> Model::getObjects($this->_templates_container, false)		));	}	# ШАБЛОНЫ ПИСЕМ	public function act_templates()	{		# ВЫВОД		View::assign('%page_title', 'Шаблоны писем');		View::render('modules/mailer/templates', true, array(			'personal'	=> $this->_personal,			'templates'	=> Model::getObjects($this->_templates_container, 1, false)		));	}	# ДОБАВИТЬ ШАБЛОН ПИСЬМА	public function act_add_template()	{		# ДОБАВЛЕНИЕ		if (isset($_POST['name']) && ($name = Helpers::escape($_POST['name'])) && isset($_POST['text']) && ($text = $_POST['text']))		{			if ($template_id = Model::addObject(				array(					'name'		=> $name,					'mother'	=> $this->_templates_container,					'class_id'	=> 1				),				array(					'Заголовок'	=> $name,					'Текст'		=> $text,				)			)) Helpers::redirect(_MODULES_.'mailer/templates');			else View::assign('error', 'Невозможно добавить шаблон письма, попробуйте позже');		}		# ВЫВОД		View::assign('%page_title', 'Добавление шаблона письма');		View::render('modules/mailer/add_template', true, array(			'personal'	=> $this->_personal		));	}	# РЕДАКТИРОВАТЬ ШАБЛОН ПИСЬМА	public function act_edit_template()	{		if (			isset($this->_params[0]) && ($template_id = filter_var($this->_params[0], FILTER_VALIDATE_INT)) &&			($template = Model::getObject($template_id, true, false)) && ($template['class_id'] == 1) && ($template['mother'] == $this->_templates_container)		)		{			# СОХРАНЕНИЕ			if (isset($_POST['name']) && ($name = Helpers::escape($_POST['name'])) && isset($_POST['text']) && ($text = $_POST['text']))			{				if (Model::editObject(					array(						'id'		=> $template_id,						'name'		=> $name,						'class_id'	=> 1					),					array(						'Заголовок'	=> $name,						'Текст'		=> $text,					)				)) Helpers::redirect(_MODULES_.'mailer/templates');				else View::assign('error', 'Невозможно сохранить шаблон письма, попробуйте позже');			}			# ВЫВОД			View::assign('%page_title', 'Редактирование шаблона письма');			View::render('modules/mailer/edit_template', true, array(				'personal'	=> $this->_personal,				'template'	=> $template			));		}		else Helpers::redirect(_MODULES_.'mailer/templates/');	}	# ПОЛЬЗОВАТЕЛЬСКИЕ ПОЛЯ	private function userFields($text, $user)	{		foreach($user as $k=>$v)			$text = str_replace("#$k#", $v, $text);		if (preg_match('/#code#/', $text))	$text = str_replace('#code#', md5($user['id'].$user['name'].$user['id']), $text);		return $text;	}	# ПРИКРЕПЛЕНИЕ ФАЙЛОВ	private function attachFiles()	{		$files = array();		if (isset($_SESSION['cms_mailer']['files']) && is_array($_SESSION['cms_mailer']['files']))		{			$path = _ABS_CACHE_.'mailer'._SEP_;			foreach($_SESSION['cms_mailer']['files'] as $mf_key=>$mf)			{				if (is_file($file_path = $path.$mf['file']))				{					$file_ext = explode('.', $mf['name']);					if ($this->_planed)					{						$files[]  = array(							'name'	=> Helpers::escape($mf['name']),							'file'	=> $mf['file']						);						unset($_SESSION['cms_mailer']['files'][$mf_key]);					}					else Mailer::attach(file_get_contents($file_path), $mf['name'], mime_content_type($file_path));				}			}		}		return $files;	}	# УДАЛЕНИЕ АТТАЧЕЙ	private function removeAttachs()	{		if (isset($_SESSION['cms_mailer']['files']) && is_array($_SESSION['cms_mailer']['files']))		{			$path = _ABS_CACHE_.'mailer'._SEP_;			foreach($_SESSION['cms_mailer']['files'] as $mf)			{				if (is_file($path.$mf['file'])) unlink($path.$mf['file']);			}			unset($_SESSION['cms_mailer']['files']);		}	}	# ПОДГОТОВКА ПЛАНОВОЙ РАССЫЛКИ	private function preparePlaned()	{		# Удаляем прикрепленные файлы		if ($mails_list = Model::$_db->select('md_planed_mailer', "WHERE `files`!='' ORDER BY `id` ASC"))		{			$files	= array();			$path	= _ABS_CACHE_.'mailer'._SEP_;			foreach ($mails_list as $mail)			{				if (($mail['files'] != '') && is_array($mail_files = @unserialize($mail['files'])))				{					foreach($mail_files as $f)					{						if (isset($f['name']) && isset($f['file']) && !in_array($f['file'], $files) && is_file($path.$f['file']))						{							$files[] = $f['file'];							unlink($path.$f['file']);						}					}				}			}		}		# Очищаем таблицу рассылки		Model::$_db->query("TRUNCATE TABLE `md_planed_mailer`");		# Обновляем задачу		if (Model::$_db->count('md_cron', "WHERE `controller`='planed_mailer'", "id") > 0)			return Model::$_db->update('md_cron', array('active'=>1, 'run'=>0, 'start_date'=>$this->_planed_ts, 'last_start'=>0), "WHERE `controller`='planed_mailer' LIMIT 1");		else			return Model::$_db->insert('md_cron', array('active'=>1, 'name'=>'Запланированная рассылка', 'controller'=>'planed_mailer', 'start_date'=>$this->_planed_ts));	}}